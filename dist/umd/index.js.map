{"version":3,"sources":["../../lib/index.tsx"],"names":["customTypeArray","customWithArray","styleButton","dashed","borderStyle","ghost","link","boxShadow","borderColor","disableAnimation","Button","_isLink","props","_isDashed","_isGhost","_type","_ghost","_style","_linkStyle","_classes","x"],"mappings":";;;;;;;;;;;;;;;;;;;MAAA,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,QAAMA,eAAe,GAAG,CAAA,SAAA,EAAA,SAAA,EAAA,MAAA,EAAA,MAAA,EAAA,WAAA,EAAxB,QAAwB,CAAxB;AAQA,QAAMC,eAAe,GAAG,CAAA,MAAA,EAAA,QAAA,EAAxB,OAAwB,CAAxB;AAeA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,WAAW,EAAE;AADP,KADU;AAIlBC,IAAAA,KAAK,EAAE;AACLD,MAAAA,WAAW,EAAE;AADR,KAJW;AAOlBE,IAAAA,IAAI,EAAE;AACJF,MAAAA,WAAW,EADP,MAAA;AAEJG,MAAAA,SAAS,EAFL,MAAA;AAGJC,MAAAA,WAAW,EAAE;AAHT;AAPY,GAApB;AAcA,QAAMC,gBAAwB,GAA9B,mBAAA;AAEA,QAAMC,MAAM,GAAA,aAAG,KAAK,CAAL,UAAA,CAAiB,CAAA,KAAA,EAAA,GAAA,KAAkC;AAChE,UAAMC,OAAO,GAAGC,KAAK,CAALA,IAAAA,KAAhB,MAAA;;AACA,UAAMC,SAAS,GAAGD,KAAK,CAALA,IAAAA,KAAlB,QAAA;;AACA,UAAME,QAAQ,GAAGF,KAAK,CAALA,IAAAA,KAAjB,OAAA;;AACA,UAAMG,KAAU,GAAGH,KAAK,CAAxB,IAAA;;AACA,UAAMI,MAAe,GACnBH,SAAS,IAATA,QAAAA,IAAAA,OAAAA,IAAoCD,KAAK,CAAzCC,KAAAA,GAAAA,IAAAA,GADF,KAAA;;AAEA,UAAMI,MAAM,GAAGL,KAAK,CAALA,IAAAA,GAAaV,WAAW,CAACU,KAAK,CAA9BA,IAAwB,CAAxBA,GAAf,SAAA;;AACA,UAAMM,UAAU,GAAGP,OAAO,GAAA,gBAAA,GAA1B,SAAA;;AACA,UAAMQ,QAAQ,GAAG,CAAA,UAAA,EAAaP,KAAK,CAAlB,SAAA,EAAA,MAAA,CAAsCQ,CAAD,IAAO,CAAC,CAA7C,CAAA,EAAA,IAAA,CAAjB,GAAiB,CAAjB;;AACA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEE,MAAA,GAAG,EAFL,GAAA;AAGE,MAAA,SAAS,EAHX,QAAA;AAIE,MAAA,KAAK,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAA,EAAkBR,KAAK,CAJ9B,KAIO,CAJP;AAKE,MAAA,KAAK,EALP,MAAA;AAME,MAAA,IAAI,EAAEG;AANR,KAAA,CAAA,EAQGH,KAAK,CATV,QACE,CADF;AAVF,GAAe,CAAf;oBAwBA,M","sourcesContent":["import * as React from 'react';\nimport ButtonOriginal, {\n  ButtonProps as ButtonPropsOriginal,\n  ButtonType as ButtonTypeOriginal,\n} from 'antd/lib/button/button';\n\ntype Mod<T, R> = Omit<T, keyof R> & R;\nconst customTypeArray = [\n  'success',\n  'warning',\n  'info',\n  'dark',\n  'lightdark',\n  'danger',\n] as const;\nconst customWithArray = ['link', 'dashed', 'ghost'] as const;\nexport type ButtonType = ButtonTypeOriginal | typeof customTypeArray[number];\ntype withProps = typeof customWithArray[number];\ntype ModButtonProps = Mod<\n  ButtonPropsOriginal,\n  {\n    type?: ButtonType;\n  }\n>;\n\nexport type ButtonProps = ModButtonProps & {\n  with?: withProps;\n  style?: React.CSSProperties;\n};\n\nconst styleButton = {\n  dashed: {\n    borderStyle: 'dashed',\n  },\n  ghost: {\n    borderStyle: 'solid',\n  },\n  link: {\n    borderStyle: 'none',\n    boxShadow: 'none',\n    borderColor: 'transparent',\n  },\n};\n\nconst disableAnimation: string = 'disable-animation';\n\nconst Button = React.forwardRef((props: ButtonProps, ref: any) => {\n  const _isLink = props.with === 'link';\n  const _isDashed = props.with === 'dashed';\n  const _isGhost = props.with === 'ghost';\n  const _type: any = props.type;\n  const _ghost: boolean =\n    _isDashed || _isGhost || _isLink || props.ghost ? true : false;\n  const _style = props.with ? styleButton[props.with] : undefined;\n  const _linkStyle = _isLink ? disableAnimation : undefined;\n  const _classes = [_linkStyle, props.className].filter((x) => !!x).join(' ');\n  return (\n    <ButtonOriginal\n      {...props}\n      ref={ref}\n      className={_classes}\n      style={{ ..._style, ...props.style }}\n      ghost={_ghost}\n      type={_type}\n    >\n      {props.children}\n    </ButtonOriginal>\n  );\n});\n\nexport default Button;\n"],"file":"index.js"}