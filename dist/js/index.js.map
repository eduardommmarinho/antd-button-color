{"version":3,"sources":["../../lib/index.tsx"],"names":["customTypeArray","customWithArray","styleButton","dashed","borderStyle","ghost","link","boxShadow","borderColor","disableAnimation","Button","React","forwardRef","props","ref","_isLink","with","_isDashed","_isGhost","_type","type","_ghost","_style","undefined","_linkStyle","_classes","className","filter","x","join","style","children"],"mappings":";;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;AAMA,IAAMA,eAAe,GAAG,CACtB,SADsB,EAEtB,SAFsB,EAGtB,MAHsB,EAItB,MAJsB,EAKtB,WALsB,EAMtB,QANsB,CAAxB;AAQA,IAAMC,eAAe,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,CAAxB;AAeA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,WAAW,EAAE;AADP,GADU;AAIlBC,EAAAA,KAAK,EAAE;AACLD,IAAAA,WAAW,EAAE;AADR,GAJW;AAOlBE,EAAAA,IAAI,EAAE;AACJF,IAAAA,WAAW,EAAE,MADT;AAEJG,IAAAA,SAAS,EAAE,MAFP;AAGJC,IAAAA,WAAW,EAAE;AAHT;AAPY,CAApB;AAcA,IAAMC,gBAAwB,GAAG,mBAAjC;AAEA,IAAMC,MAAM,gBAAGC,KAAK,CAACC,UAAN,CAAiB,UAACC,KAAD,EAAqBC,GAArB,EAAkC;AAChE,MAAMC,OAAO,GAAGF,KAAK,CAACG,IAAN,KAAe,MAA/B;;AACA,MAAMC,SAAS,GAAGJ,KAAK,CAACG,IAAN,KAAe,QAAjC;;AACA,MAAME,QAAQ,GAAGL,KAAK,CAACG,IAAN,KAAe,OAAhC;;AACA,MAAMG,KAAU,GAAGN,KAAK,CAACO,IAAzB;;AACA,MAAMC,MAAe,GACnBJ,SAAS,IAAIC,QAAb,IAAyBH,OAAzB,IAAoCF,KAAK,CAACR,KAA1C,GAAkD,IAAlD,GAAyD,KAD3D;;AAEA,MAAMiB,MAAM,GAAGT,KAAK,CAACG,IAAN,GAAad,WAAW,CAACW,KAAK,CAACG,IAAP,CAAxB,GAAuCO,SAAtD;;AACA,MAAMC,UAAU,GAAGT,OAAO,GAAGN,gBAAH,GAAsBc,SAAhD;;AACA,MAAME,QAAQ,GAAG,CAACD,UAAD,EAAaX,KAAK,CAACa,SAAnB,EAA8BC,MAA9B,CAAqC,UAACC,CAAD;AAAA,WAAO,CAAC,CAACA,CAAT;AAAA,GAArC,EAAiDC,IAAjD,CAAsD,GAAtD,CAAjB;;AACA,sBACE,oBAAC,eAAD,eACMhB,KADN;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,SAAS,EAAEW,QAHb;AAIE,IAAA,KAAK,kCAAOH,MAAP,GAAkBT,KAAK,CAACiB,KAAxB,CAJP;AAKE,IAAA,KAAK,EAAET,MALT;AAME,IAAA,IAAI,EAAEF;AANR,MAQGN,KAAK,CAACkB,QART,CADF;AAYD,CAtBc,CAAf;eAwBerB,M","sourcesContent":["import * as React from 'react';\nimport ButtonOriginal, {\n  ButtonProps as ButtonPropsOriginal,\n  ButtonType as ButtonTypeOriginal,\n} from 'antd/lib/button/button';\n\ntype Mod<T, R> = Omit<T, keyof R> & R;\nconst customTypeArray = [\n  'success',\n  'warning',\n  'info',\n  'dark',\n  'lightdark',\n  'danger',\n] as const;\nconst customWithArray = ['link', 'dashed', 'ghost'] as const;\nexport type ButtonType = ButtonTypeOriginal | typeof customTypeArray[number];\ntype withProps = typeof customWithArray[number];\ntype ModButtonProps = Mod<\n  ButtonPropsOriginal,\n  {\n    type?: ButtonType;\n  }\n>;\n\nexport type ButtonProps = ModButtonProps & {\n  with?: withProps;\n  style?: React.CSSProperties;\n};\n\nconst styleButton = {\n  dashed: {\n    borderStyle: 'dashed',\n  },\n  ghost: {\n    borderStyle: 'solid',\n  },\n  link: {\n    borderStyle: 'none',\n    boxShadow: 'none',\n    borderColor: 'transparent',\n  },\n};\n\nconst disableAnimation: string = 'disable-animation';\n\nconst Button = React.forwardRef((props: ButtonProps, ref: any) => {\n  const _isLink = props.with === 'link';\n  const _isDashed = props.with === 'dashed';\n  const _isGhost = props.with === 'ghost';\n  const _type: any = props.type;\n  const _ghost: boolean =\n    _isDashed || _isGhost || _isLink || props.ghost ? true : false;\n  const _style = props.with ? styleButton[props.with] : undefined;\n  const _linkStyle = _isLink ? disableAnimation : undefined;\n  const _classes = [_linkStyle, props.className].filter((x) => !!x).join(' ');\n  return (\n    <ButtonOriginal\n      {...props}\n      ref={ref}\n      className={_classes}\n      style={{ ..._style, ...props.style }}\n      ghost={_ghost}\n      type={_type}\n    >\n      {props.children}\n    </ButtonOriginal>\n  );\n});\n\nexport default Button;\n"],"file":"index.js"}